[
  {
    "objectID": "558_Project1.html",
    "href": "558_Project1.html",
    "title": "ST558: Project 1",
    "section": "",
    "text": "These are the libraries needed for this program.\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(ggplot2)\n\nCreate a function to read in a csv from a url.\n\nread_csv_code &lt;- function(url) {\n  data = read_delim(url, delim = \",\")\n  return(data)\n}\n\nWrite a function that does steps 1 and 2 to select certain columns and convert the data into long format so area_name only has one enrollment value.\n\nfunction_step_1_2 &lt;- function(data, pivot = \"enrollment\") {\n  return_1 &lt;- \n  data |&gt;\n  as_tibble() |&gt;\n  rename(area_name = Area_name) |&gt;\n  select(area_name, STCOU, ends_with(\"D\")) |&gt;\n  pivot_longer(cols = 3:12,\n               names_to = \"attribute\", \n               values_to = pivot)\n  return(return_1)\n}\n\nWrite a function that takes in the previous function and converts the pivoted column into a year and a measurement column.\n\nfunction_step_3 &lt;- function(data) {\n  return_2 &lt;- \n    data |&gt;\n    mutate(year = year(parse_date_time(substr(data$attribute, 8,9), \"y\")),\n           measurement = substr(data$attribute, 1,7))\n  return(return_2)\n}\n\nWrite a function for step 5, to create a new variable for state in the county tibble.\n\nfunction_step_5 &lt;- function(data) {\n  return_3 &lt;-\n    data |&gt;\n    mutate(state = substr(data$area_name, nchar(data$area_name)-1, nchar(data$area_name)))\n  return(return_3)\n}\n\nWrite a function for step 6, to create a new variable for division in non-county level tibble.\n\nfunction_step_6 &lt;- function(data) {\n  #Create vectors to assign the states based on the Census designated divisions\n  div1 &lt;- c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\")\n  div2 &lt;- c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\")\n  div3 &lt;- c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\")\n  div4 &lt;- c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\")\n  div5 &lt;- c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"WASHINGTON\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\")\n  div6 &lt;- c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\")\n  div7 &lt;- c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\")\n  div8 &lt;- c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\")\n  div9 &lt;- c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\")\n\n  #Use conditions to assign the division name\n  return_4 &lt;- \n    data |&gt;\n    mutate(division = if_else(data$area_name %in% div1, \"New England\", \n                           if_else(data$area_name %in% div2, \"Middle Atlantic\", if_else(data$area_name %in% div3, \"East North Central\", if_else(data$area_name %in% div4, \"West North Central\", if_else(data$area_name %in% div5, \"South Atlantic\", if_else(data$area_name %in% div6, \"East South Central\", if_else(data$area_name %in% div7, \"West South Central\", if_else(data$area_name %in% div8, \"Mountain\", if_else(data$area_name %in% div9, \"Pacific\", \"ERROR\" ))))))))))\n  return(return_4)\n}\n\nWrite another function that takes in the output from step 3 and creates the two tibbles in step 4, calls the above two functions (to perform steps 5 and 6), and returns two final tibbles.\n\nfunction_steps_4_5_6 &lt;- function(data) {\n  #Step 4\n  #Find all the indices where the area name contains a county\n  county_index &lt;- grep(pattern = \", \\\\w\\\\w\", data$area_name)\n  \n  #Create an index column\n  data$index &lt;- c(1:nrow(data))\n  \n  #Subset the data into two tibbles\n  county_tb &lt;- data |&gt;\n    filter(index %in% county_index) |&gt;\n    select(-index)\n  \n  state_tb &lt;- data |&gt;\n    filter(! index %in% county_index) |&gt;\n    select(-index)\n  \n  #Change the class of both tibbles\n  class(county_tb) &lt;- c(\"county\", class(county_tb))\n  class(state_tb) &lt;- c(\"state\", class(state_tb))\n  \n  #Step 5 function\n  county_tb &lt;- function_step_5(county_tb)\n  \n  #Step 6 function\n  state_tb &lt;- function_step_6(state_tb)\n  \n  return_list &lt;- list(county_tb, state_tb)\n return(return_list)\n}\n\nCreate a wrapper function that takes in the URL of a .csv file format and the optional argument for the variable name, combines all the above functions and returns a list of two tibbles.\n\nprocessing_wrapper &lt;- function(url, pivot = \"enrollment\") {\n  result &lt;- \n    read_csv_code(url) |&gt;\n    function_step_1_2(pivot) |&gt;\n    function_step_3() |&gt;\n    function_steps_4_5_6()\n  return(result)\n}"
  },
  {
    "objectID": "558_Project1.html#plot-state-function",
    "href": "558_Project1.html#plot-state-function",
    "title": "ST558: Project 1",
    "section": "Plot State Function",
    "text": "Plot State Function\nWrite a function that plots the mean value of the variable selected, across the years, and for each division. Also, removed observations at the ERROR setting of Division.\n\nplot.state &lt;- function(data, var_name = \"enrollment\") {\n plot_state_data &lt;-\n   data |&gt;\n   group_by(division, year) |&gt;\n   filter(division != \"ERROR\") |&gt;\n   mutate(mean = mean(get(var_name)))\n \n #create a line plot\n ggplot(data = plot_state_data, aes(x = year, y = mean, group = division)) +\n   geom_line(aes(color = division)) +\n   geom_point(aes(color = division)) +\n   labs(title = (paste(var_name, \"means across years by division\")), y = paste(\"mean\", var_name)) +\n   theme_minimal()\n}"
  },
  {
    "objectID": "558_Project1.html#plot-county-function",
    "href": "558_Project1.html#plot-county-function",
    "title": "ST558: Project 1",
    "section": "Plot County Function",
    "text": "Plot County Function\nWrite a function that allows the user to specify the state of interest, determine the ‘top’ or ‘bottom’ most of counties to view, and instruct how many of the ‘top’ or ‘bottom’ will be investigated.\n\nplot.county = function(data, var_name = \"enrollment\", State = \"AL\", top_bottom = \"top\", num_counties = 5){\n  # Filtering the data by state, need to fix\n  data_state = data |&gt; \n    filter(state == State)\n  \n  # overall mean of the statistic\n  mean_value = data_state |&gt;\n    group_by(area_name) |&gt;\n    summarize(mean_stat = mean(get(var_name), na.rm = TRUE))\n  \n  # filtering the data based on top_bottom\n  if (top_bottom == \"top\"){\n    top_areas = mean_value |&gt; \n      arrange(desc(mean_stat)) |&gt; \n      slice_head(n = num_counties)\n  } else{\n    top_areas = mean_value |&gt; \n      arrange(mean_stat) |&gt; \n      slice_head(n = num_counties)\n  }\n  \n  data_filter = data_state |&gt; \n    filter(area_name %in% top_areas$area_name)\n  \n  # plotting\n  ggplot(data_filter, aes(x = year, y = get(var_name), color = area_name)) +\n    geom_line() +\n    geom_point() + \n    labs(title = paste(top_bottom, num_counties, \"mean\", var_name, \"across years by county\"), x = \"year\", y = paste(\"mean\", var_name), color = \"county, state\") + \n    theme_minimal()\n}"
  },
  {
    "objectID": "558_Project1.html#edu01-data-set-run",
    "href": "558_Project1.html#edu01-data-set-run",
    "title": "ST558: Project 1",
    "section": "EDU01 Data set run",
    "text": "EDU01 Data set run\nThe ED01 data contains the values for public school enrollment.\n\nurlEDU01A = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\"\nurlEDU01B = \"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\"\n\n# Run your data processing function on the two enrollment URLs\nA = processing_wrapper(urlEDU01A)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nB = processing_wrapper(urlEDU01B)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Run your data combining function to put these into one object (with two data frames)\ndf_EDU = combine_datasets(A, B)\ndf_EDU\n\n$County_dat\n# A tibble: 62,900 × 7\n   area_name   STCOU attribute  enrollment  year measurement state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D       6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D       6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D       6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D       7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D       7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D       7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D       7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D       7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D       7834  1996 EDU0101     AL   \n# ℹ 62,890 more rows\n\n$State_dat\n# A tibble: 1,060 × 7\n   area_name     STCOU attribute  enrollment  year measurement division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737  1996 EDU0101     ERROR   \n# ℹ 1,050 more rows\n\n# Use the plot function on the state data frame\nplot.state(df_EDU$State_dat)\n\n\n\n\n\n\n\n# Use the plot function on the county data frame\nplot.county(df_EDU$County_dat, State = \"NC\", top_bottom = \"top\", num_counties = 20)\n\n\n\n\n\n\n\nplot.county(df_EDU$County_dat, State = \"SC\", top_bottom = \"bottom\", num_counties = 7)\n\n\n\n\n\n\n\nplot.county(df_EDU$County_dat)\n\n\n\n\n\n\n\nplot.county(df_EDU$County_dat, State = \"PA\", top_bottom = \"top\", num_counties = 8)"
  },
  {
    "objectID": "558_Project1.html#pst01-data-set-run",
    "href": "558_Project1.html#pst01-data-set-run",
    "title": "ST558: Project 1",
    "section": "PST01 Data set run",
    "text": "PST01 Data set run\nThe PST01 data contains values for resident total population.\n\nurlPST01A = \"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\"\nurlPST01B = \"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\"\nurlPST01C = \"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\"\nurlPST01D = \"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\"\n\n# Run your data processing function on the four data sets at URLs\nAA = processing_wrapper(urlPST01A, pivot = \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST015171N1, PST015171N2, PST015172N1, PST015172...\ndbl (20): PST015171F, PST015171D, PST015172F, PST015172D, PST015173F, PST015...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nBB = processing_wrapper(urlPST01B, pivot = \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST025182N1, PST025182N2, PST025183N1, PST025183...\ndbl (20): PST025182F, PST025182D, PST025183F, PST025183D, PST025184F, PST025...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCC = processing_wrapper(urlPST01C, pivot = \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST035191N1, PST035191N2, PST035192N1, PST035192...\ndbl (20): PST035191F, PST035191D, PST035192F, PST035192D, PST035193F, PST035...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nDD = processing_wrapper(urlPST01D, pivot = \"population\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST045200N1, PST045200N2, PST045201N1, PST045201...\ndbl (20): PST045200F, PST045200D, PST045201F, PST045201D, PST045202F, PST045...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Run your data combining function to put these into one object\ndf_PA = combine_datasets(AA, BB)\ndf_PB = combine_datasets(df_PA, CC)\ndf_PST = combine_datasets(df_PB, DD)\ndf_PST \n\n$County_dat\n# A tibble: 125,800 × 7\n   area_name   STCOU attribute  population  year measurement state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 PST015171D      25508  1971 PST0151     AL   \n 2 Autauga, AL 01001 PST015172D      27166  1972 PST0151     AL   \n 3 Autauga, AL 01001 PST015173D      28463  1973 PST0151     AL   \n 4 Autauga, AL 01001 PST015174D      29266  1974 PST0151     AL   \n 5 Autauga, AL 01001 PST015175D      29718  1975 PST0151     AL   \n 6 Autauga, AL 01001 PST015176D      29896  1976 PST0151     AL   \n 7 Autauga, AL 01001 PST015177D      30462  1977 PST0151     AL   \n 8 Autauga, AL 01001 PST015178D      30882  1978 PST0151     AL   \n 9 Autauga, AL 01001 PST015179D      32055  1979 PST0151     AL   \n10 Autauga, AL 01001 PST025181D      31985  1981 PST0251     AL   \n# ℹ 125,790 more rows\n\n$State_dat\n# A tibble: 2,120 × 7\n   area_name     STCOU attribute  population  year measurement division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 PST015171D  206827028  1971 PST0151     ERROR   \n 2 UNITED STATES 00000 PST015172D  209283904  1972 PST0151     ERROR   \n 3 UNITED STATES 00000 PST015173D  211357490  1973 PST0151     ERROR   \n 4 UNITED STATES 00000 PST015174D  213341552  1974 PST0151     ERROR   \n 5 UNITED STATES 00000 PST015175D  215465246  1975 PST0151     ERROR   \n 6 UNITED STATES 00000 PST015176D  217562728  1976 PST0151     ERROR   \n 7 UNITED STATES 00000 PST015177D  219759860  1977 PST0151     ERROR   \n 8 UNITED STATES 00000 PST015178D  222095080  1978 PST0151     ERROR   \n 9 UNITED STATES 00000 PST015179D  224567234  1979 PST0151     ERROR   \n10 UNITED STATES 00000 PST025181D  229466391  1981 PST0251     ERROR   \n# ℹ 2,110 more rows\n\n# Use the plot function on the state data frame\nplot.state(df_PST$State_dat, var_name = \"population\")\n\n\n\n\n\n\n\n# Use the plot function on the county data frame\nplot.county(df_PST$County_dat, var_name = \"population\", State = \"CA\", top_bottom = \"top\", num_counties = 15)\n\n\n\n\n\n\n\nplot.county(df_PST$County_dat, var_name = \"population\", State = \"TX\", top_bottom = \"top\", num_counties = 4)\n\n\n\n\n\n\n\nplot.county(df_PST$County_dat, var_name = \"population\")\n\n\n\n\n\n\n\nplot.county(df_PST$County_dat, var_name = \"population\", State = \"NY\", top_bottom = \"top\", num_counties = 10)"
  }
]