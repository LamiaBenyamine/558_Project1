---
title: "ST558: Project 1"
authors: "Lamia Benyaine & Scott Van Slyck"
description: "Write functions to manipulate and process data sets"
date: "June 18, 2024"
format: html
editor: visual 
---

# *Data Processing*

These are the libraries needed for this program.

```{r libraries}
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
```

Create a function to read in a csv from a url.

```{r read csv}
read_csv_code <- function(url) {
  data = read_delim(url, delim = ",")
  return(data)
}
```

Write a function that does steps 1 and 2 to select certain columns and convert the data into long format so area_name only has one enrollment value.

```{r function for steps 1 & 2}
function_step_1_2 <- function(data, pivot = "enrollment") {
  return_1 <- 
  data |>
  as_tibble() |>
  rename(area_name = Area_name) |>
  select(area_name, STCOU, ends_with("D")) |>
  pivot_longer(cols = 3:12,
               names_to = "attribute", 
               values_to = pivot)
  return(return_1)
}
```

Write a function that takes in the previous function and converts the pivoted column into a year and a measurement column.

```{r function for step 3}
function_step_3 <- function(data) {
  return_2 <- 
    data |>
    mutate(year = year(parse_date_time(substr(data$attribute, 8,9), "y")),
           measurement = substr(data$attribute, 1,7))
  return(return_2)
}
```

Write a function for step 5, to create a new variable for state in the county tibble.

```{r function for step 5}
function_step_5 <- function(data) {
  return_3 <-
    data |>
    mutate(state = substr(data$area_name, nchar(data$area_name)-1, nchar(data$area_name)))
  return(return_3)
}
```

Write a function for step 6, to create a new variable for division in non-county level tibble.

```{r function for step 6}
function_step_6 <- function(data) {
  #Create vectors to assign the states based on the Census designated divisions
  div1 <- c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT")
  div2 <- c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA")
  div3 <- c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN")
  div4 <- c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA")
  div5 <- c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WASHINGTON", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA")
  div6 <- c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE")
  div7 <- c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS")
  div8 <- c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING")
  div9 <- c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON")

  #Use conditions to assign the division name
  return_4 <- 
    data |>
    mutate(division = if_else(data$area_name %in% div1, "New England", 
                           if_else(data$area_name %in% div2, "Middle Atlantic", if_else(data$area_name %in% div3, "East North Central", if_else(data$area_name %in% div4, "West North Central", if_else(data$area_name %in% div5, "South Atlantic", if_else(data$area_name %in% div6, "East South Central", if_else(data$area_name %in% div7, "West South Central", if_else(data$area_name %in% div8, "Mountain", if_else(data$area_name %in% div9, "Pacific", "ERROR" ))))))))))
  return(return_4)
}
```

Write another function that takes in the output from step 3 and creates the two tibbles in step 4, calls the above two functions (to perform steps 5 and 6), and returns two final tibbles.

```{r function for steps 4, 5, and 6}
function_steps_4_5_6 <- function(data) {
  #Step 4
  #Find all the indices where the area name contains a county
  county_index <- grep(pattern = ", \\w\\w", data$area_name)
  
  #Create an index column
  data$index <- c(1:nrow(data))
  
  #Subset the data into two tibbles
  county_tb <- data |>
    filter(index %in% county_index) |>
    select(-index)
  
  state_tb <- data |>
    filter(! index %in% county_index) |>
    select(-index)
  
  #Change the class of both tibbles
  class(county_tb) <- c("county", class(county_tb))
  class(state_tb) <- c("state", class(state_tb))
  
  #Step 5 function
  county_tb <- function_step_5(county_tb)
  
  #Step 6 function
  state_tb <- function_step_6(state_tb)
  
  return_list <- list(county_tb, state_tb)
 return(return_list)
}
```

Create a wrapper function that takes in the URL of a .csv file format and the optional argument for the variable name, combines all the above functions and returns a list of two tibbles.

```{r wrapper function}
processing_wrapper <- function(url, pivot = "enrollment") {
  result <- 
    read_csv_code(url) |>
    function_step_1_2(pivot) |>
    function_step_3() |>
    function_steps_4_5_6()
  return(result)
}
```

# *Data Combining*

Combines two data sets and separates them by county and non-county data and returns a list of the two.

```{r}
combine_datasets = function(data1, data2){
  #combine data
  combo_county = dplyr::bind_rows(data1[[1]], data2[[1]])
  combo_non_cty = dplyr::bind_rows(data1[[2]], data2[[2]])
  
  return(list(County_dat = combo_county, State_dat = combo_non_cty))
}
```

# *Generic Summarize Functions*

## Plot State Function

Write a function that plots the mean value of the variable selected, across the years, and for each division. Also, removed observations at the ERROR setting of Division.

```{r plot state data}
plot.state <- function(data, var_name = "enrollment") {
 plot_state_data <-
   data |>
   group_by(division, year) |>
   filter(division != "ERROR") |>
   mutate(mean = mean(get(var_name)))
 
 #create a line plot
 ggplot(data = plot_state_data, aes(x = year, y = mean, group = division)) +
   geom_line(aes(color = division)) +
   geom_point(aes(color = division)) +
   labs(title = (paste(var_name, "means across years by division")), y = paste("mean", var_name)) +
   theme_minimal()
}
```

## Plot County Function

Write a function that allows the user to specify the state of interest, determine the 'top' or 'bottom' most of counties to view, and instruct how many of the 'top' or 'bottom' will be investigated.

```{r plot county data}
plot.county = function(data, var_name = "enrollment", State = "AL", top_bottom = "top", num_counties = 5){
  # Filtering the data by state, need to fix
  data_state = data |> 
    filter(state == State)
  
  # overall mean of the statistic
  mean_value = data_state |>
    group_by(area_name) |>
    summarize(mean_stat = mean(get(var_name), na.rm = TRUE))
  
  # filtering the data based on top_bottom
  if (top_bottom == "top"){
    top_areas = mean_value |> 
      arrange(desc(mean_stat)) |> 
      slice_head(n = num_counties)
  } else{
    top_areas = mean_value |> 
      arrange(mean_stat) |> 
      slice_head(n = num_counties)
  }
  
  data_filter = data_state |> 
    filter(area_name %in% top_areas$area_name)
  
  # plotting
  ggplot(data_filter, aes(x = year, y = get(var_name), color = area_name)) +
    geom_line() +
    geom_point() + 
    labs(title = paste(top_bottom, num_counties, "mean", var_name, "across years by county"), x = "year", y = paste("mean", var_name), color = "county, state") + 
    theme_minimal()
}
```

# *Putting it all together*

## EDU01 Data set run

The ED01 data contains the values for public school enrollment.

```{r ED01 run}
urlEDU01A = "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"
urlEDU01B = "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"

# Run your data processing function on the two enrollment URLs
A = processing_wrapper(urlEDU01A)
B = processing_wrapper(urlEDU01B)

# Run your data combining function to put these into one object (with two data frames)
df_EDU = combine_datasets(A, B)
df_EDU

# Use the plot function on the state data frame
plot.state(df_EDU$State_dat)

# Use the plot function on the county data frame
plot.county(df_EDU$County_dat, State = "NC", top_bottom = "top", num_counties = 20)
plot.county(df_EDU$County_dat, State = "SC", top_bottom = "bottom", num_counties = 7)
plot.county(df_EDU$County_dat)
plot.county(df_EDU$County_dat, State = "PA", top_bottom = "top", num_counties = 8)
```

## PST01 Data set run

The PST01 data contains values for resident total population.

```{r PST01 run}
urlPST01A = "https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv"
urlPST01B = "https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv"
urlPST01C = "https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv"
urlPST01D = "https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv"

# Run your data processing function on the four data sets at URLs
AA = processing_wrapper(urlPST01A, pivot = "population")
BB = processing_wrapper(urlPST01B, pivot = "population")
CC = processing_wrapper(urlPST01C, pivot = "population")
DD = processing_wrapper(urlPST01D, pivot = "population")

# Run your data combining function to put these into one object
df_PA = combine_datasets(AA, BB)
df_PB = combine_datasets(df_PA, CC)
df_PST = combine_datasets(df_PB, DD)
df_PST 

# Use the plot function on the state data frame
plot.state(df_PST$State_dat, var_name = "population")

# Use the plot function on the county data frame
plot.county(df_PST$County_dat, var_name = "population", State = "CA", top_bottom = "top", num_counties = 15)
plot.county(df_PST$County_dat, var_name = "population", State = "TX", top_bottom = "top", num_counties = 4)
plot.county(df_PST$County_dat, var_name = "population")
plot.county(df_PST$County_dat, var_name = "population", State = "NY", top_bottom = "top", num_counties = 10)
```
